// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: idl/pbpod/pod.proto

package pbpod

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PodServiceClient is the client API for PodService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PodServiceClient interface {
	// 创建Pods
	CreatePods(ctx context.Context, in *CreatePodsReq, opts ...grpc.CallOption) (*CreatePodsResp, error)
	// 创建Pod
	CreatePod(ctx context.Context, in *CreatePodReq, opts ...grpc.CallOption) (*CreatePodResp, error)
	// 删除Pod
	DeletePod(ctx context.Context, in *DeletePodReq, opts ...grpc.CallOption) (*DeletePodResp, error)
	// 更新Pod
	UpdatePod(ctx context.Context, in *UpdatePodReq, opts ...grpc.CallOption) (*UpdatePodResp, error)
	// 查询Pod明细
	ListPodDetail(ctx context.Context, in *ListPodDetailReq, opts ...grpc.CallOption) (*ListPodDetailResp, error)
	// 查询Pod全量 - 根据云类型
	ListPod(ctx context.Context, in *ListPodReq, opts ...grpc.CallOption) (*ListPodResp, error)
	// 查询所有云的Pod
	ListPodAll(ctx context.Context, in *ListPodAllReq, opts ...grpc.CallOption) (*ListPodResp, error)
}

type podServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPodServiceClient(cc grpc.ClientConnInterface) PodServiceClient {
	return &podServiceClient{cc}
}

func (c *podServiceClient) CreatePods(ctx context.Context, in *CreatePodsReq, opts ...grpc.CallOption) (*CreatePodsResp, error) {
	out := new(CreatePodsResp)
	err := c.cc.Invoke(ctx, "/pbpod.PodService/CreatePods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podServiceClient) CreatePod(ctx context.Context, in *CreatePodReq, opts ...grpc.CallOption) (*CreatePodResp, error) {
	out := new(CreatePodResp)
	err := c.cc.Invoke(ctx, "/pbpod.PodService/CreatePod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podServiceClient) DeletePod(ctx context.Context, in *DeletePodReq, opts ...grpc.CallOption) (*DeletePodResp, error) {
	out := new(DeletePodResp)
	err := c.cc.Invoke(ctx, "/pbpod.PodService/DeletePod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podServiceClient) UpdatePod(ctx context.Context, in *UpdatePodReq, opts ...grpc.CallOption) (*UpdatePodResp, error) {
	out := new(UpdatePodResp)
	err := c.cc.Invoke(ctx, "/pbpod.PodService/UpdatePod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podServiceClient) ListPodDetail(ctx context.Context, in *ListPodDetailReq, opts ...grpc.CallOption) (*ListPodDetailResp, error) {
	out := new(ListPodDetailResp)
	err := c.cc.Invoke(ctx, "/pbpod.PodService/ListPodDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podServiceClient) ListPod(ctx context.Context, in *ListPodReq, opts ...grpc.CallOption) (*ListPodResp, error) {
	out := new(ListPodResp)
	err := c.cc.Invoke(ctx, "/pbpod.PodService/ListPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podServiceClient) ListPodAll(ctx context.Context, in *ListPodAllReq, opts ...grpc.CallOption) (*ListPodResp, error) {
	out := new(ListPodResp)
	err := c.cc.Invoke(ctx, "/pbpod.PodService/ListPodAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PodServiceServer is the server API for PodService service.
// All implementations must embed UnimplementedPodServiceServer
// for forward compatibility
type PodServiceServer interface {
	// 创建Pods
	CreatePods(context.Context, *CreatePodsReq) (*CreatePodsResp, error)
	// 创建Pod
	CreatePod(context.Context, *CreatePodReq) (*CreatePodResp, error)
	// 删除Pod
	DeletePod(context.Context, *DeletePodReq) (*DeletePodResp, error)
	// 更新Pod
	UpdatePod(context.Context, *UpdatePodReq) (*UpdatePodResp, error)
	// 查询Pod明细
	ListPodDetail(context.Context, *ListPodDetailReq) (*ListPodDetailResp, error)
	// 查询Pod全量 - 根据云类型
	ListPod(context.Context, *ListPodReq) (*ListPodResp, error)
	// 查询所有云的Pod
	ListPodAll(context.Context, *ListPodAllReq) (*ListPodResp, error)
	mustEmbedUnimplementedPodServiceServer()
}

// UnimplementedPodServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPodServiceServer struct {
}

func (UnimplementedPodServiceServer) CreatePods(context.Context, *CreatePodsReq) (*CreatePodsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePods not implemented")
}
func (UnimplementedPodServiceServer) CreatePod(context.Context, *CreatePodReq) (*CreatePodResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePod not implemented")
}
func (UnimplementedPodServiceServer) DeletePod(context.Context, *DeletePodReq) (*DeletePodResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePod not implemented")
}
func (UnimplementedPodServiceServer) UpdatePod(context.Context, *UpdatePodReq) (*UpdatePodResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePod not implemented")
}
func (UnimplementedPodServiceServer) ListPodDetail(context.Context, *ListPodDetailReq) (*ListPodDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPodDetail not implemented")
}
func (UnimplementedPodServiceServer) ListPod(context.Context, *ListPodReq) (*ListPodResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPod not implemented")
}
func (UnimplementedPodServiceServer) ListPodAll(context.Context, *ListPodAllReq) (*ListPodResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPodAll not implemented")
}
func (UnimplementedPodServiceServer) mustEmbedUnimplementedPodServiceServer() {}

// UnsafePodServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PodServiceServer will
// result in compilation errors.
type UnsafePodServiceServer interface {
	mustEmbedUnimplementedPodServiceServer()
}

func RegisterPodServiceServer(s grpc.ServiceRegistrar, srv PodServiceServer) {
	s.RegisterService(&PodService_ServiceDesc, srv)
}

func _PodService_CreatePods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServiceServer).CreatePods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbpod.PodService/CreatePods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServiceServer).CreatePods(ctx, req.(*CreatePodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodService_CreatePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServiceServer).CreatePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbpod.PodService/CreatePod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServiceServer).CreatePod(ctx, req.(*CreatePodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodService_DeletePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServiceServer).DeletePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbpod.PodService/DeletePod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServiceServer).DeletePod(ctx, req.(*DeletePodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodService_UpdatePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServiceServer).UpdatePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbpod.PodService/UpdatePod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServiceServer).UpdatePod(ctx, req.(*UpdatePodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodService_ListPodDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPodDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServiceServer).ListPodDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbpod.PodService/ListPodDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServiceServer).ListPodDetail(ctx, req.(*ListPodDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodService_ListPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServiceServer).ListPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbpod.PodService/ListPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServiceServer).ListPod(ctx, req.(*ListPodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodService_ListPodAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPodAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServiceServer).ListPodAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbpod.PodService/ListPodAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServiceServer).ListPodAll(ctx, req.(*ListPodAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PodService_ServiceDesc is the grpc.ServiceDesc for PodService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PodService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbpod.PodService",
	HandlerType: (*PodServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePods",
			Handler:    _PodService_CreatePods_Handler,
		},
		{
			MethodName: "CreatePod",
			Handler:    _PodService_CreatePod_Handler,
		},
		{
			MethodName: "DeletePod",
			Handler:    _PodService_DeletePod_Handler,
		},
		{
			MethodName: "UpdatePod",
			Handler:    _PodService_UpdatePod_Handler,
		},
		{
			MethodName: "ListPodDetail",
			Handler:    _PodService_ListPodDetail_Handler,
		},
		{
			MethodName: "ListPod",
			Handler:    _PodService_ListPod_Handler,
		},
		{
			MethodName: "ListPodAll",
			Handler:    _PodService_ListPodAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/pbpod/pod.proto",
}
